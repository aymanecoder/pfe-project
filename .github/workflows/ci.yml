on:
  push:
    branches:
      - "dev"
  pull_request:
    branches:
      - "prod"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package -DskipTests -f ./backed-spring/pom.xml

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Backend tests
        run: mvn -B test -PskipITs -f ./backed-spring/pom.xml

  sonarqube:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B clean package sonar:sonar -DskipTests -f ./backed-spring/pom.xml

  Docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B clean package -DskipTests
        working-directory: ./backed-spring/

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./backed-spring/
          dockerfile: Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/project-pfe:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backed-spring/
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/project-pfe:latest

  Merge_to_prod:
    needs: Docker
    runs-on: ubuntu-latest

    steps:
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "prod"
          title: "Merge to prod"
          commit-message: "Merge changes to prod"
          body: |
            This pull request automatically merges changes to the prod branch.

      - name: Merge Pull Request
        uses: peter-evans/merge-pull-request-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: "squash"



#  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